Title         : A*corral*ando Contractor.NET
Heading Base  : 2
Author        : Lean

[TITLE]

# Contractor


# Corral
* Reachability Modulo Theories solver.
* Usa un CEGAR loop para tratar de encontrar alguna instancia de las variables
involucradas en el código a analizar que lleve a un bug.
* Usa stratified inlining para evitar la exploración exponencial del código al entrar en llamadas recursivas o a otros métodos. La idea es anular llamadas (To be continued)
* Usa under y over approximation (3 posibles resultados: True Bug, No Bugs, Recursion Bound Reached)
* Se basa fuertemente en la traducción del código .NET a Boogie que provee el 
proyecto BCT. Sin embargo, dicho proyecto mostró en reiteradas ocasiones fallar por no poder traducir.
En particular, la API de Code Contracts no esta completamente implementada y las instrucciones de Requires y Ensures tienen que ser traducidas como Assumes y Asserts.

## Corral como motor de decisión
El algoritmo principal de creación de EPAs sigue siendo el mismo que es utilizado con Code Contracts, propuesto en [Program Abstractions for Behaviour Validation][ICSE2011].

La primer diferencia que existe con la implementación de Code Contracts es que luego de generarse las queries y de ser incluidas en el assembly 
utilizado para ejecutarlas, dll que solo contiene la clase a analizar, tienen que pasar por una etapa de traducción.
Para esta traducción se utiliza el proyecto [BCT] que reescribe el código .NET en código Boogie.
Una vez que la traducción de la clase esta terminada, se realiza una llamada a Corral por cada query que se quiere analizar. Esta es una segunda diferencia
con Code Contracts, ya que este último requiere de una única llamada para analizar toda una clase. Esto se realiza de esta manera ya que Corral
necesita que se le especifique un único entrypoint a partir del cual empezar a analizar.

Dado que out-of-the-box Corral no provee un API para manipularlo, se modificó  el código de la aplicación de consola para que pueda ser llamado como un objeto de .NET. Además, como el resultado de la ejecución es originalmente mostrado por consola, se utilizó un enum para poder devolver cualquiera de los posibles resultados.
Dichos resultados pueden ser:

* "True bug": Corral encontró valores de variables para los cuales halló una traza que hace fallar un Assert
* "No bugs found (Proof computed)": Corral puedo probar que no hay ejecución posible que haga fallar los Asserts.
* "No bugs found (Proof not computed) aka. Recursion Bound Reached ": Corral no encontró bugs, sin embargo, tampoco puedo probar que no exista algún caso que falle, ya que alcanzo la cota de recursiones que está dispuesto a intentar.

Las queries se generan en dos momentos de la generación del EPA. La primer etapa es cuando se intenta responder a la pregunta _¿qué acciones quedan habilitadas si estoy en un estado 's' y ejecuto la acción 'a'?_

Para responder a esta pregunta se crea por cada acción a testear 't' una query positiva y otra negativa. Las queries positivas intentan probar que desde 's' ejecutando 'a' se puede probar la precondicion de 't'. Análogamente, las negativas intentan probar la negación de la precondicion de 't'.
Una vez generadas se realizan todas las llamadas correspondientes para analizarlas y obtener el resultado de Corral.

Para clasificar las acciones se crean dos conjuntos: *habilitadas* y *deshabilitadas*. Estos conjuntos contienen inicialmente todas las acciones.

Luego, se evalúa el resultado de cada query de la siguiente manera:

* Si el resultado es "No bugs (proof computed)", no se hace nada.
* Si el resultado es "True bug" o "Recursion Bound Reached"
  + y la query era positiva, no pude probar $inv(s) \land pre(a) \rightarrow pre(t)$, se quita 'a' de *habilitadas*.
  + y la query era negativa, no pude probar $inv(s) \land pre(a) \rightarrow \neg pre(t)$, se quita 'a' de *deshabilitadas*.

De esta manera, nos quedan definidos los conjuntos *habilitadas*, *deshabilitadas* y un grupo de acciones que no pertenecen a ninguno de los conjuntos anteriores.

Con estos conjuntos es posible definir todos los posibles estados alcanzables desde 's'.

La segunda etapa es para responder la pregunta ¿qué estados son efectivamente alcanzables si estoy en el estado 's' y ejecuto la acción 'a'?

En este caso, se crea una sola query negativa por cada tupla (origen, acción, destino). De manera similar el resultado de la ejecución de Corral se interpreta con las siguientes reglas:

* Si el resultado es "No bugs (proof computed)", no se agrega la transición al EPA.
* Si el resultado es "True bug", se agrega la transición al EPA.
* Si el resultado es "Recursion Bound Reached", se agrega la transición al EPA pero distinguida con '?' ya que no hay garantías de que sea posible ejercitarla.


[ICSE2011]: "http://publicaciones.dc.uba.ar/Publications/2011/DBGU11/paper-icse-2011.pdf" 
[BCT]: http://bytecodetranslator.codeplex.com